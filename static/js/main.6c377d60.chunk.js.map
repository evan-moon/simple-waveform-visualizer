{"version":3,"sources":["atoms/audio.ts","utils/audio.ts","components/AudioUploader.tsx","components/ControlRange.tsx","components/Controller.tsx","utils/waveform.ts","components/Waveform.tsx","hooks/useAudio.ts","hooks/useEffects.ts","core/effects/Effect.ts","core/effects/Compressor.ts","components/EffectorControllers/CompressorController.tsx","core/effects/LowPassCombFilter.ts","core/effects/AlgorithmReverb.ts","components/EffectorControllers/AlgorithmReverbController.tsx","core/effects/ConvolutionReverb.ts","components/EffectorControllers/ConvolutionReverbController.tsx","components/EffectorControllers/DelayController.tsx","components/EffectorControllers/DistortionController.tsx","core/effects/Delay.ts","core/effects/Distortion.ts","core/effects/GraphicEQ.ts","components/EffectorControllers/GraphicEQController.tsx","core/effects/Filter.ts","components/EffectorControllers/HighPassFilterController.tsx","components/EffectorControllers/LowPassFilterController.tsx","core/effects/Tremolo.ts","components/EffectorControllers/TremoloController.tsx","components/EffectorSelector.tsx","components/EffectorControllers/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["audioContextState","atom","key","default","effectState","dangerouslyAllowMutability","createAudio","context","audioFile","a","decodeAudioData","buffer","bufferSourceNode","createBufferSource","masterGain","createGain","connect","destination","loop","AudioUploader","fileRef","useRef","useRecoilState","setAudioContext","handleFileChange","e","file","currentTarget","files","reader","FileReader","onload","arrayBuffer","target","result","ArrayBuffer","AudioContext","audioObject","readAsArrayBuffer","onClick","current","click","css","width","height","border","cursor","transition","opacity","onChange","ref","type","position","display","ControlRange","label","min","max","defaultValue","useState","value","setValue","useEffect","flexDirection","alignItems","Number","WebkitAppearance","step","Controller","audio","useRecoilValue","isPlay","setPlay","stop","start","gain","setValueAtTime","currentTime","getWaveformSVGPath","peaks","sampleRate","sampleSize","length","sampleStep","Math","floor","numberOfChannels","mergedPeaks","channelIndex","getChannelData","Array","fill","forEach","_","newPeakIndex","end","sampleIndex","v","parseWaveformPeaks","totalPeaks","d","peakNumber","shift","WaveForm","color","svgRef","waveformPath","setWaveformPath","path","viewBox","preserveAspectRatio","stroke","useAudio","useEffects","registedEffects","registEffects","addEffect","effect","Error","lastNode","outputNode","disconnect","inputNode","removeEffect","effectId","targetEffectIndex","findIndex","id","prevNode","targetNode","effects","filter","changeEffect","newEffect","originEffectorIndex","originEffector","map","index","Effect","defaultOption","options","name","this","Date","now","Compressor","threshold","knee","attack","release","ratio","compressorNode","createDynamicsCompressor","t","CompressorController","setGain","setThreshold","setKnee","setAttack","setRelease","setRatio","LowPassCombFilter","frequency","delay","resonance","filterNode","delayNode","gainNode","createBiquadFilter","createDelay","delayTime","AlgorithmReverb","mix","roomSize","dampening","wetNode","dryNode","splitter","merger","combFilters","allFilters","createChannelSplitter","createChannelMerger","delayPerSecond","combLeft","slice","combRight","combFilter","setResonance","setFrequency","AlgorithmReverbController","setMix","setRoomSize","setDampening","ConvolutionReverb","time","decay","reverbNode","createConvolver","_generateImpulseResponse","impulse","createBuffer","leftImpulse","rightImpulse","i","random","pow","ConvolutionReverbController","setTime","setDecay","DelayController","setFeedback","DistortionController","Delay","feedback","feedbackNode","Distortion","waveShaperNode","createWaveShaper","curve","getWaveShaperCurve","x","outputGain","Float32Array","deg","PI","abs","GraphicEQ","frequencies","q","filters","_generateFilter","find","node","Q","reduce","prev","GraphicEQController","getFilters","setFrequencyGain","Filter","filterType","LowPassFilter","HighPassFilter","HighPassFilterController","setQ","LowPassFilterController","Tremolo","speed","depth","tremoloNode","shaperNode","lfoNode","createOscillator","TremoloController","setSpeed","setDepth","effectors","EffectorSelector","effector","getEffector","EffectorControllers","selectedEffectType","selectEffectType","margin","padding","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c377d60.chunk.js","sourcesContent":["import { atom } from 'recoil';\nimport { AudioObject } from '../models/audio';\nimport { Effector } from '../models/effects';\n\nexport const audioContextState = atom<AudioObject | null>({\n  key: 'audioContext',\n  default: null,\n});\n\nexport const effectState = atom<Effector[]>({\n  key: 'audioEffects',\n  default: [],\n  dangerouslyAllowMutability: true,\n});\n","import { AudioObject } from '../models/audio';\n\nexport async function createAudio(\n  context: AudioContext,\n  audioFile: ArrayBuffer\n): Promise<AudioObject> {\n  const buffer = await context.decodeAudioData(audioFile);\n  const bufferSourceNode = context.createBufferSource();\n  bufferSourceNode.buffer = buffer;\n\n  const masterGain = context.createGain();\n  bufferSourceNode.connect(masterGain);\n  masterGain.connect(context.destination);\n\n  // test\n  bufferSourceNode.loop = true;\n\n  return {\n    context,\n    buffer,\n    bufferSourceNode,\n    masterGain,\n  };\n}\n","/** @jsxImportSource @emotion/react */\nimport { ChangeEvent, useRef } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { audioContextState } from '../atoms/audio';\nimport { createAudio } from '../utils/audio';\n\nconst AudioUploader = () => {\n  const fileRef = useRef<HTMLInputElement | null>(null);\n  const [, setAudioContext] = useRecoilState(audioContextState);\n\n  const handleClick = () => {\n    if (fileRef.current == null) {\n      return;\n    }\n\n    fileRef.current.click();\n  };\n\n  const handleFileChange = async (e: ChangeEvent<HTMLInputElement>) => {\n    const file = e.currentTarget.files?.[0];\n    if (file == null) {\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const arrayBuffer = e.target?.result;\n      if (arrayBuffer instanceof ArrayBuffer) {\n        const context = new AudioContext();\n        const audioObject = await createAudio(context, arrayBuffer);\n        setAudioContext(audioObject);\n      } else {\n        setAudioContext(null);\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n\n  return (\n    <>\n      <button\n        onClick={handleClick}\n        css={{\n          width: 30,\n          height: 30,\n          border: 'none',\n          cursor: 'pointer',\n          transition: 'opacity .2s ease-in-out',\n          '&:hover': {\n            opacity: 0.7,\n          },\n        }}\n      >\n        +\n      </button>\n      <input\n        onChange={handleFileChange}\n        ref={fileRef}\n        type=\"file\"\n        css={{ position: 'fixed', display: 'none' }}\n      />\n    </>\n  );\n};\n\nexport default AudioUploader;\n","/** @jsxImportSource @emotion/react */\nimport { useEffect, useState } from 'react';\n\ninterface Props {\n  label: string;\n  min: number;\n  max: number;\n  defaultValue: number;\n  onChange?: (value: number) => void;\n}\nconst ControlRange = ({ label, min, max, defaultValue, onChange }: Props) => {\n  const [value, setValue] = useState(defaultValue);\n\n  useEffect(() => {\n    onChange?.(value);\n  }, [value]);\n\n  return (\n    <div css={{ display: 'inline-flex', flexDirection: 'column', alignItems: 'center' }}>\n      <label>{label}</label>\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={value}\n        onChange={(e) => {\n          setValue(Number(e.target.value));\n        }}\n        css={{\n          WebkitAppearance: 'slider-vertical',\n        }}\n        step={min + max / 1000}\n      />\n      <span>{value}</span>\n    </div>\n  );\n};\n\nexport default ControlRange;\n","/** @jsxImportSource @emotion/react */\nimport { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { audioContextState } from '../atoms/audio';\nimport ControlRange from './ControlRange';\n\nconst Controller = () => {\n  const audio = useRecoilValue(audioContextState);\n  const [isPlay, setPlay] = useState(false);\n\n  const handlePlayButtonClick = () => {\n    if (isPlay) {\n      audio?.bufferSourceNode.stop();\n      setPlay(false);\n    } else {\n      audio?.bufferSourceNode.start();\n      setPlay(true);\n    }\n  };\n\n  return (\n    <div>\n      {audio != null ? (\n        <button onClick={handlePlayButtonClick}>{isPlay ? '정지' : '재생'}</button>\n      ) : null}\n      <div>\n        {audio?.masterGain != null ? (\n          <>\n            <ControlRange\n              label=\"Master\"\n              min={0}\n              max={10}\n              defaultValue={3}\n              onChange={(value) =>\n                audio.masterGain.gain.setValueAtTime(value, audio.context.currentTime)\n              }\n            />\n          </>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default Controller;\n","import { AudioObject } from '../models/audio';\n\nexport function parseWaveformPeaks({ buffer }: AudioObject) {\n  const sampleRate = buffer.sampleRate;\n\n  const sampleSize = buffer.length / sampleRate;\n  const sampleStep = Math.floor(sampleSize / 10) || 1;\n  const numberOfChannels = buffer.numberOfChannels;\n  const mergedPeaks: number[] = [];\n\n  for (let channelIndex = 0; channelIndex < numberOfChannels; channelIndex++) {\n    const peaks = buffer.getChannelData(channelIndex);\n\n    Array(sampleRate)\n      .fill(0)\n      .forEach((_, newPeakIndex) => {\n        const start = Math.floor(newPeakIndex * sampleSize);\n        const end = Math.floor(start + sampleSize);\n        let min = peaks[0];\n        let max = peaks[0];\n\n        for (let sampleIndex = start; sampleIndex < end; sampleIndex += sampleStep) {\n          const v = peaks[sampleIndex];\n\n          if (v > max) {\n            max = v;\n          } else if (v < min) {\n            min = v;\n          }\n        }\n\n        if (channelIndex === 0 || max > mergedPeaks[2 * newPeakIndex]) {\n          mergedPeaks[2 * newPeakIndex] = max;\n        }\n        if (channelIndex === 0 || min < mergedPeaks[2 * newPeakIndex + 1]) {\n          mergedPeaks[2 * newPeakIndex + 1] = min;\n        }\n      });\n  }\n\n  return mergedPeaks;\n}\n\nexport function getWaveformSVGPath(audio: AudioObject) {\n  const peaks = parseWaveformPeaks(audio);\n  if (audio.buffer) {\n    const totalPeaks = peaks.length;\n\n    let d = '';\n    for (let peakNumber = 0; peakNumber < totalPeaks; peakNumber++) {\n      if (peakNumber % 2 === 0) {\n        d += ` M${Math.floor(peakNumber / 2)}, ${peaks.shift()}`;\n      } else {\n        d += ` L${Math.floor(peakNumber / 2)}, ${peaks.shift()}`;\n      }\n    }\n\n    return d;\n  } else {\n    return '';\n  }\n}\n","/** @jsxImportSource @emotion/react */\nimport { useEffect, useRef, useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { audioContextState } from '../atoms/audio';\nimport { getWaveformSVGPath } from '../utils/waveform';\n\ninterface Props {\n  color?: string;\n}\nconst WaveForm = ({ color = '#000000' }: Props) => {\n  const [audio] = useRecoilState(audioContextState);\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [waveformPath, setWaveformPath] = useState('');\n\n  useEffect(() => {\n    if (audio != null && svgRef != null) {\n      const path = getWaveformSVGPath(audio);\n      setWaveformPath(path);\n    }\n  }, [audio, svgRef]);\n\n  return (\n    <svg\n      ref={svgRef}\n      css={{ width: '100%', height: 300 }}\n      viewBox={`0 -1 ${audio?.buffer.sampleRate ?? 0} 2`}\n      preserveAspectRatio=\"none\"\n    >\n      <g css={{ width: '100%', height: '100%' }}>\n        <path d={waveformPath} css={{ stroke: color }} />\n      </g>\n    </svg>\n  );\n};\n\nexport default WaveForm;\n","import { useRecoilState } from 'recoil';\nimport { audioContextState } from '../atoms/audio';\n\nexport function useAudio() {\n  return useRecoilState(audioContextState);\n}\n","import { useRecoilState } from 'recoil';\nimport { effectState } from '../atoms/audio';\nimport { Effector } from '../models/effects';\nimport { useAudio } from './useAudio';\n\nexport function useEffects() {\n  const [audio] = useAudio();\n  const [registedEffects, registEffects] = useRecoilState(effectState);\n\n  const addEffect = (effect: Effector) => {\n    if (audio == null) {\n      throw new Error('아직 AudioContext가 등록되지 않았습니다');\n    }\n\n    const lastNode =\n      registedEffects.length > 0\n        ? registedEffects[registedEffects.length - 1].outputNode\n        : audio.bufferSourceNode;\n\n    lastNode.disconnect();\n    lastNode.connect(effect.inputNode);\n    effect.outputNode.connect(audio.masterGain);\n\n    registEffects([...registedEffects, effect]);\n  };\n\n  const removeEffect = (effectId: string) => {\n    if (audio == null) {\n      throw new Error('아직 AudioContext가 등록되지 않았습니다');\n    }\n\n    const targetEffectIndex = registedEffects.findIndex((effect) => effect.id === effectId);\n    if (targetEffectIndex === -1) {\n      throw new Error('이펙트를 찾을 수 없습니다');\n    }\n\n    const prevNode =\n      targetEffectIndex === 0\n        ? audio.bufferSourceNode\n        : registedEffects[targetEffectIndex - 1].outputNode;\n    const targetNode =\n      registedEffects[targetEffectIndex + 1] != null\n        ? registedEffects[targetEffectIndex + 1].inputNode\n        : audio.masterGain;\n\n    prevNode.disconnect();\n    prevNode.connect(targetNode);\n\n    registEffects((effects) => effects.filter((effect) => effect.id !== effectId));\n  };\n\n  const changeEffect = (effectId: string, newEffect: Effector) => {\n    if (audio == null) {\n      throw new Error('아직 AudioContext가 등록되지 않았습니다');\n    }\n\n    const originEffectorIndex = registedEffects.findIndex((e) => e.id === effectId);\n    const originEffector = registedEffects[originEffectorIndex];\n\n    const prevNode =\n      originEffectorIndex === 0\n        ? audio.bufferSourceNode\n        : registedEffects[originEffectorIndex - 1].outputNode;\n    const targetNode = registedEffects[originEffectorIndex + 1]\n      ? registedEffects[originEffectorIndex + 1].inputNode\n      : audio.masterGain;\n\n    prevNode.disconnect();\n    originEffector.outputNode.disconnect();\n\n    prevNode.connect(newEffect.inputNode);\n    newEffect.outputNode.connect(targetNode);\n\n    registEffects((effects) =>\n      effects.map((effect, index) => (index === originEffectorIndex ? newEffect : effect))\n    );\n  };\n\n  return { addEffect, removeEffect, changeEffect, registedEffects };\n}\n","import { EffectType } from '../../models/effects';\n\ninterface EffectorOption {\n  gain: number;\n  name?: string;\n}\nexport class Effect<T extends EffectorOption> {\n  id: string;\n  type: EffectType;\n  name?: string;\n  context: AudioContext;\n  options: T;\n  inputNode: GainNode;\n  outputNode: GainNode;\n\n  constructor(context: AudioContext, type: EffectType, defaultOption: T, options?: T) {\n    this.id = `${type}-${Date.now()}`;\n    this.type = type;\n    this.context = context;\n    this.options = { ...defaultOption, ...options };\n    this.inputNode = this.context.createGain();\n    this.outputNode = this.context.createGain();\n  }\n\n  setGain(value: number) {\n    this.options.gain = value;\n    this.outputNode.gain.setValueAtTime(value, this.context.currentTime);\n  }\n}\n","import { Effect } from './Effect';\n\ninterface Options {\n  gain: number;\n  threshold: number;\n  knee: number;\n  attack: number;\n  release: number;\n  ratio: number;\n}\nexport class Compressor extends Effect<Options> {\n  compressorNode: DynamicsCompressorNode;\n\n  constructor(context: AudioContext, options?: Options) {\n    const defaultOption = {\n      threshold: -24,\n      knee: 30,\n      attack: 0.003,\n      release: 0.25,\n      ratio: 12,\n      gain: 1,\n    };\n    super(context, 'compressor', defaultOption, options);\n    this.compressorNode = context.createDynamicsCompressor();\n\n    const t = this.context.currentTime;\n    this.compressorNode.threshold.setValueAtTime(this.options.threshold, t);\n    this.compressorNode.knee.setValueAtTime(this.options.knee, t);\n    this.compressorNode.attack.setValueAtTime(this.options.attack, t);\n    this.compressorNode.release.setValueAtTime(this.options.release, t);\n    this.compressorNode.ratio.setValueAtTime(this.options.ratio, t);\n\n    this.inputNode.connect(this.compressorNode);\n    this.compressorNode.connect(this.outputNode);\n  }\n\n  setThreshold(value: number) {\n    const t = this.context.currentTime;\n    this.compressorNode.threshold.setValueAtTime(value, t);\n  }\n\n  setKnee(value: number) {\n    const t = this.context.currentTime;\n    this.compressorNode.knee.setValueAtTime(value, t);\n  }\n\n  setAttack(value: number) {\n    const t = this.context.currentTime;\n    this.compressorNode.attack.setValueAtTime(value, t);\n  }\n\n  setRelease(value: number) {\n    const t = this.context.currentTime;\n    this.compressorNode.release.setValueAtTime(value, t);\n  }\n\n  setRatio(value: number) {\n    const t = this.context.currentTime;\n    this.compressorNode.ratio.setValueAtTime(value, t);\n  }\n}\n","import { Compressor } from '../../core/effects/Compressor';\nimport { useEffects } from '../../hooks/useEffects';\nimport ControlRange from '../ControlRange';\n\ninterface Props {\n  effect: Compressor;\n}\nconst CompressorController = ({ effect }: Props) => {\n  const { removeEffect } = useEffects();\n\n  const remove = () => {\n    removeEffect(effect.id);\n  };\n\n  return (\n    <div>\n      <ControlRange\n        label=\"Gain\"\n        min={0}\n        max={1}\n        defaultValue={0.3}\n        onChange={(value) => effect.setGain(value)}\n      />\n      <ControlRange\n        label=\"Threshold\"\n        min={-100}\n        max={0}\n        defaultValue={-50}\n        onChange={(value) => effect.setThreshold(value)}\n      />\n      <ControlRange\n        label=\"Knee\"\n        min={0}\n        max={40}\n        defaultValue={30}\n        onChange={(value) => effect.setKnee(value)}\n      />\n      <ControlRange\n        label=\"Attack\"\n        min={0}\n        max={1}\n        defaultValue={0.3}\n        onChange={(value) => effect.setAttack(value)}\n      />\n      <ControlRange\n        label=\"Release\"\n        min={0}\n        max={1}\n        defaultValue={0.5}\n        onChange={(value) => effect.setRelease(value)}\n      />\n      <ControlRange\n        label=\"Ratio\"\n        min={1}\n        max={20}\n        defaultValue={12}\n        onChange={(value) => effect.setRatio(value)}\n      />\n      <button onClick={remove}>제거</button>\n    </div>\n  );\n};\n\nexport default CompressorController;\n","import { Effect } from './Effect';\n\ninterface Options {\n  frequency: number;\n  delay: number;\n  resonance: number;\n  gain: number;\n}\nexport class LowPassCombFilter extends Effect<Options> {\n  filterNode: BiquadFilterNode;\n  delayNode: DelayNode;\n  gainNode: GainNode;\n\n  constructor(context: AudioContext, options: Options) {\n    const defaultOption = {\n      frequency: 440,\n      delay: 0.7,\n      resonance: 0.5,\n      gain: 1,\n    };\n\n    super(context, 'lowpassCombFilter', defaultOption, options);\n\n    const { frequency, delay, resonance } = this.options;\n\n    this.filterNode = this.context.createBiquadFilter();\n    this.filterNode.type = 'lowpass';\n    this.filterNode.frequency.setValueAtTime(frequency, this.context.currentTime);\n\n    this.delayNode = this.context.createDelay(delay);\n    this.gainNode = this.context.createGain();\n    this.gainNode.gain.setValueAtTime(resonance, context.currentTime);\n\n    this.inputNode\n      .connect(this.delayNode)\n      .connect(this.filterNode)\n      .connect(this.gainNode)\n      .connect(this.inputNode)\n      .connect(this.outputNode);\n  }\n\n  setFrequency(value: number) {\n    this.filterNode.frequency.setValueAtTime(value, this.context.currentTime);\n  }\n\n  setDelay(value: number) {\n    this.delayNode.delayTime.setValueAtTime(value, this.context.currentTime);\n  }\n\n  setResonance(value: number) {\n    this.options.resonance = value;\n    this.gainNode.gain.setValueAtTime(value, this.context.currentTime);\n  }\n}\n","import { LowPassCombFilter } from './LowPassCombFilter';\nimport { Effect } from './Effect';\n\ninterface Options {\n  mix: number;\n  roomSize: number;\n  dampening: number;\n  gain: number;\n}\nexport class AlgorithmReverb extends Effect<Options> {\n  wetNode: GainNode;\n  dryNode: GainNode;\n  splitter: ChannelSplitterNode;\n  merger: ChannelMergerNode;\n  combFilters: LowPassCombFilter[];\n  allFilters: BiquadFilterNode[];\n\n  constructor(context: AudioContext, options?: Options) {\n    const defaultOption = {\n      mix: 0.5,\n      roomSize: 3,\n      dampening: 3,\n      gain: 1,\n    };\n    super(context, 'algorithmReverb', defaultOption, options);\n    const sampleRate = context.sampleRate;\n\n    this.wetNode = this.context.createGain();\n    this.dryNode = this.context.createGain();\n    this.splitter = this.context.createChannelSplitter(2);\n    this.merger = this.context.createChannelMerger(2);\n\n    this.combFilters = [1557, 1617, 1491, 1422, 1277, 1356, 1188, 1116].map((delayPerSecond) => {\n      return new LowPassCombFilter(this.context, {\n        delay: delayPerSecond / sampleRate,\n        frequency: this.options.dampening,\n        resonance: 0.5,\n        gain: 1,\n      });\n    });\n\n    this.allFilters = [225, 556, 441, 341].map((frequency) => {\n      const filter = this.context.createBiquadFilter();\n      filter.type = 'allpass';\n      filter.frequency.setValueAtTime(frequency, this.context.currentTime);\n      return filter;\n    });\n\n    const combLeft = this.combFilters.slice(0, 1);\n    const combRight = this.combFilters.slice(7);\n\n    this.inputNode.connect(this.wetNode).connect(this.splitter);\n    this.inputNode.connect(this.dryNode).connect(this.outputNode);\n\n    combLeft.forEach((combFilter) => {\n      this.splitter.connect(combFilter.inputNode, 0);\n      combFilter.outputNode.connect(this.merger, 0, 0);\n    });\n    combRight.forEach((combFilter) => {\n      this.splitter.connect(combFilter.inputNode, 1);\n      combFilter.outputNode.connect(this.merger, 0, 1);\n    });\n\n    this.merger\n      .connect(this.allFilters[0])\n      .connect(this.allFilters[1])\n      .connect(this.allFilters[2])\n      .connect(this.allFilters[3])\n      .connect(this.outputNode);\n  }\n\n  setMix(value: number) {\n    // 0 ~ 1 (dry ~ wet)\n    this.options.mix = value;\n    this.wetNode.gain.value = value;\n    this.dryNode.gain.value = 1 - value;\n  }\n\n  setRoomSize(value: number) {\n    this.combFilters.forEach((combFilter) => combFilter.setResonance(value));\n  }\n\n  setDampening(value: number) {\n    this.combFilters.forEach((combFilter) => combFilter.setFrequency(value));\n  }\n}\n","import { AlgorithmReverb } from '../../core/effects/AlgorithmReverb';\nimport { useEffects } from '../../hooks/useEffects';\nimport ControlRange from '../ControlRange';\n\ninterface Props {\n  effect: AlgorithmReverb;\n}\nconst AlgorithmReverbController = ({ effect }: Props) => {\n  const { removeEffect } = useEffects();\n\n  const remove = () => {\n    removeEffect(effect.id);\n  };\n\n  return (\n    <div>\n      <ControlRange\n        label=\"Gain\"\n        min={0}\n        max={1}\n        defaultValue={0.3}\n        onChange={(value) => effect.setGain(value)}\n      />\n      <ControlRange\n        label=\"Mix\"\n        min={0}\n        max={1}\n        defaultValue={0.5}\n        onChange={(value) => effect.setMix(value)}\n      />\n      <ControlRange\n        label=\"Room Size\"\n        min={0}\n        max={1}\n        defaultValue={0.5}\n        onChange={(value) => effect.setRoomSize(value)}\n      />\n      <ControlRange\n        label=\"Dampening\"\n        min={0}\n        max={22000}\n        defaultValue={440}\n        onChange={(value) => effect.setDampening(value)}\n      />\n      <button onClick={remove}>제거</button>\n    </div>\n  );\n};\n\nexport default AlgorithmReverbController;\n","import { Effect } from './Effect';\n\ninterface Options {\n  mix: number;\n  time: number;\n  decay: number;\n  gain: number;\n}\nexport class ConvolutionReverb extends Effect<Options> {\n  reverbNode: ConvolverNode;\n  wetNode: GainNode;\n  dryNode: GainNode;\n\n  constructor(context: AudioContext, options?: Options) {\n    const defaultOption = {\n      mix: 0.5,\n      time: 0.01,\n      decay: 0.01,\n      gain: 1,\n    };\n    super(context, 'convolutionReverb', defaultOption, options);\n\n    this.reverbNode = context.createConvolver();\n    this.wetNode = context.createGain();\n    this.dryNode = context.createGain();\n\n    this.inputNode.connect(this.reverbNode);\n    this.inputNode.connect(this.dryNode);\n\n    this.reverbNode.connect(this.wetNode);\n\n    this.wetNode.connect(this.outputNode);\n    this.dryNode.connect(this.outputNode);\n\n    this._generateImpulseResponse();\n  }\n\n  setMix(value: number) {\n    // 0 ~ 1 (dry ~ wet)\n    this.options.mix = value;\n    this.wetNode.gain.value = value;\n    this.dryNode.gain.value = 1 - value;\n  }\n\n  setTime(value: number) {\n    this.options.time = value;\n    this._generateImpulseResponse();\n  }\n\n  setDecay(value: number) {\n    this.options.decay = value;\n    this._generateImpulseResponse();\n  }\n\n  _generateImpulseResponse() {\n    const sampleRate = this.context.sampleRate;\n    const length = sampleRate * this.options.time;\n    const impulse = this.context.createBuffer(2, length, sampleRate);\n\n    const leftImpulse = impulse.getChannelData(0);\n    const rightImpulse = impulse.getChannelData(1);\n\n    const decay = this.options.decay;\n    for (let i = 0; i < length; i++) {\n      leftImpulse[i] = (Math.random() * 2 - 1) * Math.pow(1 - i / length, decay);\n      rightImpulse[i] = (Math.random() * 2 - 1) * Math.pow(1 - i / length, decay);\n    }\n\n    if (this.reverbNode.buffer) {\n      this.inputNode.disconnect(this.reverbNode);\n      this.reverbNode.disconnect(this.wetNode);\n\n      this.reverbNode = this.context.createConvolver();\n      this.inputNode.connect(this.reverbNode);\n      this.reverbNode.connect(this.wetNode);\n    }\n\n    this.reverbNode.buffer = impulse;\n  }\n}\n","import { ConvolutionReverb } from '../../core/effects/ConvolutionReverb';\nimport { useEffects } from '../../hooks/useEffects';\nimport ControlRange from '../ControlRange';\n\ninterface Props {\n  effect: ConvolutionReverb;\n}\nconst ConvolutionReverbController = ({ effect }: Props) => {\n  const { removeEffect } = useEffects();\n\n  const remove = () => {\n    removeEffect(effect.id);\n  };\n\n  return (\n    <div>\n      <ControlRange\n        label=\"Gain\"\n        min={0}\n        max={1}\n        defaultValue={0.3}\n        onChange={(value) => effect.setGain(value)}\n      />\n      <ControlRange\n        label=\"Mix\"\n        min={0}\n        max={1}\n        defaultValue={0.5}\n        onChange={(value) => effect.setMix(value)}\n      />\n      <ControlRange\n        label=\"Reverb Time\"\n        min={0.01}\n        max={2}\n        defaultValue={0.01}\n        onChange={(value) => effect.setTime(value)}\n      />\n      <ControlRange\n        label=\"Decay\"\n        min={0.01}\n        max={2}\n        defaultValue={0.01}\n        onChange={(value) => effect.setDecay(value)}\n      />\n      <button onClick={remove}>제거</button>\n    </div>\n  );\n};\n\nexport default ConvolutionReverbController;\n","import { Delay } from '../../core/effects/Delay';\nimport { useEffects } from '../../hooks/useEffects';\nimport ControlRange from '../ControlRange';\n\ninterface Props {\n  effect: Delay;\n}\nconst DelayController = ({ effect }: Props) => {\n  const { removeEffect } = useEffects();\n\n  const remove = () => {\n    removeEffect(effect.id);\n  };\n\n  return (\n    <div>\n      <ControlRange\n        label=\"Gain\"\n        min={0}\n        max={1}\n        defaultValue={0.3}\n        onChange={(value) => effect.setGain(value)}\n      />\n      <ControlRange\n        label=\"Mix\"\n        min={0}\n        max={1}\n        defaultValue={0.5}\n        onChange={(value) => effect.setMix(value)}\n      />\n      <ControlRange\n        label=\"Delay Time\"\n        min={0}\n        max={1}\n        defaultValue={0.3}\n        onChange={(value) => effect.setTime(value)}\n      />\n      <ControlRange\n        label=\"Feedback\"\n        min={0}\n        max={1}\n        defaultValue={0.5}\n        onChange={(value) => effect.setFeedback(value)}\n      />\n      <button onClick={remove}>제거</button>\n    </div>\n  );\n};\n\nexport default DelayController;\n","import { Distortion } from '../../core/effects/Distortion';\nimport { useEffects } from '../../hooks/useEffects';\nimport ControlRange from '../ControlRange';\n\ninterface Props {\n  effect: Distortion;\n}\nconst DistortionController = ({ effect }: Props) => {\n  const { removeEffect } = useEffects();\n\n  const remove = () => {\n    removeEffect(effect.id);\n  };\n\n  return (\n    <div>\n      <ControlRange\n        label=\"Gain\"\n        min={0}\n        max={1}\n        defaultValue={0.3}\n        onChange={(value) => effect.setGain(value)}\n      />\n      <button onClick={remove}>제거</button>\n    </div>\n  );\n};\n\nexport default DistortionController;\n","import { Effect } from './Effect';\n\ninterface Options {\n  mix: number;\n  feedback: number;\n  time: number;\n  gain: number;\n}\nexport class Delay extends Effect<Options> {\n  dryNode: GainNode;\n  wetNode: GainNode;\n  feedbackNode: GainNode;\n  delayNode: DelayNode;\n\n  constructor(context: AudioContext, options?: Options) {\n    const defaultOption = {\n      mix: 0.5,\n      feedback: 0.5,\n      time: 0.3,\n      gain: 1,\n    };\n    super(context, 'delay', defaultOption, options);\n\n    this.dryNode = this.context.createGain();\n    this.wetNode = this.context.createGain();\n    this.feedbackNode = this.context.createGain();\n    this.delayNode = this.context.createDelay();\n\n    this.inputNode.connect(this.dryNode);\n    this.dryNode.connect(this.outputNode);\n\n    // Feedback Loop\n    this.delayNode.connect(this.feedbackNode);\n    this.feedbackNode.connect(this.delayNode);\n\n    this.inputNode.connect(this.delayNode);\n    this.delayNode.connect(this.wetNode);\n    this.wetNode.connect(this.outputNode);\n\n    this.setTime(this.options.time);\n    this.setFeedback(this.options.feedback);\n  }\n\n  setMix(value: number) {\n    this.options.mix = value;\n    this.wetNode.gain.value = value;\n    this.dryNode.gain.value = 1 - value;\n  }\n\n  setTime(value: number) {\n    this.options.time = value;\n    this.delayNode.delayTime.setValueAtTime(value, this.context.currentTime);\n  }\n\n  setFeedback(value: number) {\n    this.options.feedback = value;\n    this.feedbackNode.gain.setValueAtTime(value, this.context.currentTime);\n  }\n}\n","import { Effect } from './Effect';\n\ninterface Options {\n  gain: number;\n}\nexport class Distortion extends Effect<Options> {\n  waveShaperNode: WaveShaperNode;\n\n  constructor(context: AudioContext, options?: Options) {\n    const defaultOption = {\n      gain: 1,\n    };\n    super(context, 'distortion', defaultOption, options);\n\n    this.waveShaperNode = this.context.createWaveShaper();\n    this.waveShaperNode.curve = getWaveShaperCurve(defaultOption.gain, this.context.sampleRate);\n\n    this.inputNode.connect(this.waveShaperNode);\n    this.waveShaperNode.connect(this.outputNode);\n  }\n\n  override setGain(gain: number) {\n    this.options.gain = gain;\n    this.waveShaperNode.curve = getWaveShaperCurve(gain, this.context.sampleRate);\n  }\n}\n\nfunction getWaveShaperCurve(gain: number, sampleRate: number) {\n  const outputGain = gain * 100;\n  const curve = new Float32Array(sampleRate);\n  const deg = Math.PI / 100;\n  let x;\n\n  for (let i = 0; i < sampleRate; ++i) {\n    x = (i * 2) / sampleRate - 1;\n    curve[i] = ((3 + outputGain) * x * 20 * deg) / (Math.PI + outputGain * Math.abs(x));\n  }\n\n  return curve;\n}\n","import { Effect } from './Effect';\n\ninterface EQFilter {\n  frequency: number;\n  node: BiquadFilterNode;\n}\nexport class GraphicEQ extends Effect<{ gain: number }> {\n  frequencies: number[];\n  q: number;\n  filters: EQFilter[];\n\n  constructor(context: AudioContext) {\n    super(context, 'graphicEQ', { gain: 1 }, { gain: 1 });\n\n    this.frequencies = [\n      25, 31, 40, 50, 63, 80, 100, 125, 160, 200, 250, 315, 400, 500, 630, 800, 1000, 1250, 1600,\n      2000, 2500, 3150, 4000, 5000, 6300, 8000, 10000, 12500, 16000, 20000,\n    ];\n    this.q = 1;\n    this.filters = [];\n    this._generateFilter();\n  }\n\n  getFilters() {\n    return this.filters;\n  }\n\n  setFrequencyGain(frequency: number, gain: number) {\n    const filter = this.filters.find((filter) => filter.frequency === frequency);\n    filter?.node.gain.setValueAtTime(gain, this.context.currentTime);\n  }\n\n  _generateFilter() {\n    const frequencies = this.frequencies;\n\n    this.filters = frequencies.map((frequency, index) => {\n      const filterNode = this.context.createBiquadFilter();\n      filterNode.gain.value = 0;\n      filterNode.frequency.setValueAtTime(frequency, this.context.currentTime);\n      filterNode.Q.setValueAtTime(this.q, this.context.currentTime);\n      if (index === 0) {\n        filterNode.type = 'lowshelf';\n      } else if (index === frequencies.length - 1) {\n        filterNode.type = 'highshelf';\n      } else {\n        filterNode.type = 'peaking';\n      }\n      return { frequency, node: filterNode };\n    });\n\n    this.filters.reduce(\n      (prev, current) => {\n        prev.node.connect(current.node);\n        return current;\n      },\n      { node: this.inputNode }\n    );\n\n    this.filters[this.filters.length - 1].node.connect(this.outputNode);\n  }\n}\n","import { GraphicEQ } from '../../core/effects/GraphicEQ';\nimport { useEffects } from '../../hooks/useEffects';\nimport ControlRange from '../ControlRange';\n\ninterface Props {\n  effect: GraphicEQ;\n}\nconst GraphicEQController = ({ effect }: Props) => {\n  const { removeEffect } = useEffects();\n\n  const remove = () => {\n    removeEffect(effect.id);\n  };\n\n  return (\n    <div>\n      {effect.getFilters().forEach((filter) => {\n        return (\n          <ControlRange\n            label={`${filter.frequency}hz`}\n            defaultValue={0}\n            min={-40}\n            max={40}\n            onChange={(value) => effect.setFrequencyGain(filter.frequency, value)}\n          />\n        );\n      })}\n      <button onClick={remove}>제거</button>\n    </div>\n  );\n};\n\nexport default GraphicEQController;\n","import { EffectType } from '../../models/effects';\nimport { Effect } from './Effect';\n\ninterface Options {\n  frequency: number;\n  q: number;\n  gain: number;\n}\nclass Filter extends Effect<Options> {\n  filterNode: BiquadFilterNode;\n\n  constructor(\n    context: AudioContext,\n    type: EffectType,\n    filterType: BiquadFilterType,\n    options?: Options\n  ) {\n    const defaultOption = {\n      frequency: 350,\n      q: 1,\n      gain: 1,\n    };\n\n    super(context, type, defaultOption, options);\n\n    this.filterNode = context.createBiquadFilter();\n    this.filterNode.type = filterType;\n    this.filterNode.frequency.setValueAtTime(this.options.frequency, this.context.currentTime);\n    this.filterNode.Q.setValueAtTime(this.options.q, this.context.currentTime);\n\n    this.inputNode.connect(this.filterNode);\n    this.filterNode.connect(this.outputNode);\n  }\n\n  setFrequency(value: number) {\n    // LPF, HPF의 min, max 정해줘야 할듯? 현재는 1~22050\n    this.filterNode.frequency.setValueAtTime(value, this.context.currentTime);\n  }\n\n  setQ(value: number) {\n    this.filterNode.Q.setValueAtTime(value, this.context.currentTime);\n  }\n}\n\nexport class LowPassFilter extends Filter {\n  constructor(context: AudioContext, options?: Options) {\n    super(context, 'lowpassFilter', 'lowpass', options);\n  }\n}\n\nexport class HighPassFilter extends Filter {\n  constructor(context: AudioContext, options?: Options) {\n    super(context, 'highpassFilter', 'highpass', options);\n  }\n}\n","import { HighPassFilter } from '../../core/effects/Filter';\nimport { useEffects } from '../../hooks/useEffects';\nimport ControlRange from '../ControlRange';\n\ninterface Props {\n  effect: HighPassFilter;\n}\nconst HighPassFilterController = ({ effect }: Props) => {\n  const { removeEffect } = useEffects();\n\n  const remove = () => {\n    removeEffect(effect.id);\n  };\n\n  return (\n    <div>\n      <ControlRange\n        label=\"Frequency\"\n        min={1}\n        max={22050}\n        defaultValue={350}\n        onChange={(value) => effect.setFrequency(value)}\n      />\n      <ControlRange\n        label=\"Q\"\n        min={0.0001}\n        max={10}\n        defaultValue={0.0001}\n        onChange={(value) => effect.setQ(value)}\n      />\n      <button onClick={remove}>제거</button>\n    </div>\n  );\n};\n\nexport default HighPassFilterController;\n","import { LowPassFilter } from '../../core/effects/Filter';\nimport { useEffects } from '../../hooks/useEffects';\nimport ControlRange from '../ControlRange';\n\ninterface Props {\n  effect: LowPassFilter;\n}\nconst LowPassFilterController = ({ effect }: Props) => {\n  const { removeEffect } = useEffects();\n\n  const remove = () => {\n    removeEffect(effect.id);\n  };\n\n  return (\n    <div>\n      <ControlRange\n        label=\"Frequency\"\n        min={1}\n        max={22050}\n        defaultValue={350}\n        onChange={(value) => effect.setFrequency(value)}\n      />\n      <ControlRange\n        label=\"Q\"\n        min={0.0001}\n        max={10}\n        defaultValue={0.0001}\n        onChange={(value) => effect.setQ(value)}\n      />\n      <button onClick={remove}>제거</button>\n    </div>\n  );\n};\n\nexport default LowPassFilterController;\n","import { Effect } from './Effect';\n\ninterface Options {\n  speed: number;\n  depth: number;\n  mix: number;\n  gain: number;\n}\nexport class Tremolo extends Effect<Options> {\n  wetNode: GainNode;\n  dryNode: GainNode;\n  tremoloNode: GainNode;\n\n  shaperNode: WaveShaperNode;\n  lfoNode: OscillatorNode;\n\n  constructor(context: AudioContext, options?: Options) {\n    const defaultOption = {\n      speed: 4,\n      depth: 1,\n      mix: 0.8,\n      gain: 1,\n    };\n\n    super(context, 'tremolo', defaultOption, options);\n\n    this.wetNode = this.context.createGain();\n    this.dryNode = this.context.createGain();\n\n    this.tremoloNode = this.context.createGain();\n    this.tremoloNode.gain.value = 0;\n\n    this.shaperNode = this.context.createWaveShaper();\n    this.shaperNode.curve = new Float32Array([0, 1]);\n    this.shaperNode.connect(this.tremoloNode.gain);\n\n    this.lfoNode = this.context.createOscillator();\n    this.lfoNode.connect(this.shaperNode);\n    this.lfoNode.type = 'sine';\n\n    this.inputNode.connect(this.dryNode);\n    this.dryNode.connect(this.outputNode);\n\n    this.lfoNode.start(0);\n    this.inputNode.connect(this.tremoloNode);\n    this.tremoloNode.connect(this.wetNode);\n    this.wetNode.connect(this.outputNode);\n  }\n\n  setMix(value: number) {\n    this.options.mix = value;\n    this.wetNode.gain.value = value;\n    this.dryNode.gain.value = 1 - value;\n  }\n\n  setSpeed(value: number) {\n    this.options.speed = value;\n    this.lfoNode.frequency.value = value;\n  }\n\n  setDepth(value: number) {\n    this.options.depth = value;\n    this.shaperNode.curve = new Float32Array([1 - value, 1]);\n  }\n}\n","import { Tremolo } from '../../core/effects/Tremolo';\nimport { useEffects } from '../../hooks/useEffects';\nimport ControlRange from '../ControlRange';\n\ninterface Props {\n  effect: Tremolo;\n}\nconst TremoloController = ({ effect }: Props) => {\n  const { removeEffect } = useEffects();\n\n  const remove = () => {\n    removeEffect(effect.id);\n  };\n\n  return (\n    <div>\n      <ControlRange\n        label=\"Gain\"\n        min={0}\n        max={1}\n        defaultValue={0.3}\n        onChange={(value) => effect.setGain(value)}\n      />\n      <ControlRange\n        label=\"Mix\"\n        min={0}\n        max={1}\n        defaultValue={0.5}\n        onChange={(value) => effect.setMix(value)}\n      />\n      <ControlRange\n        label=\"Speed\"\n        min={0}\n        max={20}\n        defaultValue={4}\n        onChange={(value) => effect.setSpeed(value)}\n      />\n      <ControlRange\n        label=\"Depth\"\n        min={0}\n        max={1}\n        defaultValue={1}\n        onChange={(value) => effect.setDepth(value)}\n      />\n      <button onClick={remove}>제거</button>\n    </div>\n  );\n};\n\nexport default TremoloController;\n","import { ChangeEvent } from 'react';\nimport { EffectType } from '../models/effects';\n\nconst effectors: EffectType[] = [\n  'compressor',\n  'algorithmReverb',\n  'convolutionReverb',\n  'delay',\n  'distortion',\n  'lowpassFilter',\n  'highpassFilter',\n  'graphicEQ',\n  'tremolo',\n];\n\ninterface Props {\n  onChange?: (effector: EffectType) => void;\n}\nconst EffectorSelector = ({ onChange }: Props) => {\n  const handleChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    onChange?.(e.target.value as EffectType);\n  };\n\n  return (\n    <select onChange={handleChange}>\n      {effectors.map((effector) => (\n        <option key={effector}>{effector}</option>\n      ))}\n    </select>\n  );\n};\n\nexport default EffectorSelector;\n","/** @jsxImportSource @emotion/react */\nimport { useAudio } from '../../hooks/useAudio';\nimport { useEffects } from '../../hooks/useEffects';\nimport { Compressor } from '../../core/effects/Compressor';\nimport CompressorController from './CompressorController';\nimport { Effector, EffectType } from '../../models/effects';\nimport { AlgorithmReverb } from '../../core/effects/AlgorithmReverb';\nimport AlgorithmReverbController from './AlgorithmReverbController';\nimport { ConvolutionReverb } from '../../core/effects/ConvolutionReverb';\nimport ConvolutionReverbController from './ConvolutionReverbController';\nimport DelayController from './DelayController';\nimport DistortionController from './DistortionController';\nimport { Delay } from '../../core/effects/Delay';\nimport { Distortion } from '../../core/effects/Distortion';\nimport { GraphicEQ } from '../../core/effects/GraphicEQ';\nimport GraphicEQController from './GraphicEQController';\nimport { HighPassFilter, LowPassFilter } from '../../core/effects/Filter';\nimport HighPassFilterController from './HighPassFilterController';\nimport LowPassFilterController from './LowPassFilterController';\nimport { Tremolo } from '../../core/effects/Tremolo';\nimport TremoloController from './TremoloController';\nimport EffectorSelector from '../EffectorSelector';\nimport { useState } from 'react';\n\nconst getEffector = (effect: Effector) => {\n  if (effect instanceof Compressor) {\n    return <CompressorController effect={effect} />;\n  } else if (effect instanceof AlgorithmReverb) {\n    return <AlgorithmReverbController effect={effect} />;\n  } else if (effect instanceof ConvolutionReverb) {\n    return <ConvolutionReverbController effect={effect} />;\n  } else if (effect instanceof Delay) {\n    return <DelayController effect={effect} />;\n  } else if (effect instanceof Distortion) {\n    return <DistortionController effect={effect} />;\n  } else if (effect instanceof GraphicEQ) {\n    return <GraphicEQController effect={effect} />;\n  } else if (effect instanceof HighPassFilter) {\n    return <HighPassFilterController effect={effect} />;\n  } else if (effect instanceof LowPassFilter) {\n    return <LowPassFilterController effect={effect} />;\n  } else if (effect instanceof Tremolo) {\n    return <TremoloController effect={effect} />;\n  }\n\n  return null;\n};\n\nconst EffectorControllers = () => {\n  const [audio] = useAudio();\n  const { registedEffects, addEffect } = useEffects();\n  const [selectedEffectType, selectEffectType] = useState<EffectType>('compressor');\n\n  return (\n    <div>\n      <ul css={{ display: 'flex', margin: 0, padding: 0 }}>\n        {registedEffects.map((effect) => (\n          <li key={effect.id}>{getEffector(effect)}</li>\n        ))}\n      </ul>\n      <div>\n        <EffectorSelector onChange={selectEffectType} />\n        <button\n          onClick={() => {\n            if (audio?.context == null || selectedEffectType == null) {\n              return;\n            }\n\n            switch (selectedEffectType) {\n              case 'compressor':\n                addEffect(new Compressor(audio.context));\n                break;\n              case 'algorithmReverb':\n                addEffect(new AlgorithmReverb(audio.context));\n                break;\n              case 'convolutionReverb':\n                addEffect(new ConvolutionReverb(audio.context));\n                break;\n              case 'delay':\n                addEffect(new Delay(audio.context));\n                break;\n              case 'distortion':\n                addEffect(new Distortion(audio.context));\n                break;\n              case 'graphicEQ':\n                addEffect(new GraphicEQ(audio.context));\n                break;\n              case 'highpassFilter':\n                addEffect(new HighPassFilter(audio.context));\n                break;\n              case 'lowpassFilter':\n                addEffect(new LowPassFilter(audio.context));\n                break;\n              case 'tremolo':\n                addEffect(new Tremolo(audio.context));\n                break;\n            }\n          }}\n        >\n          이펙터 추가\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default EffectorControllers;\n","import { RecoilRoot } from 'recoil';\nimport AudioUploader from './components/AudioUploader';\nimport Controller from './components/Controller';\nimport WaveForm from './components/Waveform';\nimport EffectorControllers from './components/EffectorControllers';\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <AudioUploader />\n      <WaveForm />\n      <Controller />\n      <EffectorControllers />\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}